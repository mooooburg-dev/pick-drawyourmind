name: 자동 MAIN 배포 PR 생성

on:
  push:
    branches: [ feature/local ]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: main 브랜치와의 차이점 분석
      id: changes
      run: |
        # main 브랜치와 비교하여 커밋 목록 가져오기
        git fetch origin main:main || echo "main 브랜치 페치 실패, 계속 진행"

        # main과 feature/local 간의 차이점 분석
        if git rev-parse --verify main >/dev/null 2>&1; then
          COMMITS=$(git log --oneline main..HEAD --pretty=format:"- %s" | head -20)
        else
          # main 브랜치가 없는 경우 최근 10개 커밋 사용
          COMMITS=$(git log --oneline -10 --pretty=format:"- %s")
        fi

        # 빈 커밋 목록 처리
        if [ -z "$COMMITS" ]; then
          COMMITS="- 새로운 기능 및 개선사항"
        fi

        # 다중 라인 출력을 위한 EOF 사용
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # 변경된 파일 목록
        if git rev-parse --verify main >/dev/null 2>&1; then
          CHANGED_FILES=$(git diff --name-only main..HEAD | head -15 | sed 's/^/- /')
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD | head -15 | sed 's/^/- /')
        fi

        if [ -z "$CHANGED_FILES" ]; then
          CHANGED_FILES="- 다양한 파일 수정 및 개선"
        fi

        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 날짜 및 시간 설정
      id: date
      run: |
        echo "current_date=$(date +'%Y년 %m월 %d일')" >> $GITHUB_OUTPUT
        echo "current_time=$(date +'%H:%M')" >> $GITHUB_OUTPUT

    - name: 기존 PR 확인
      id: check_existing_pr
      run: |
        # GitHub API로 기존 PR 확인
        EXISTING_PR=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:feature/local&base=main&state=open")

        PR_COUNT=$(echo "$EXISTING_PR" | jq '. | length')
        echo "existing_pr_count=$PR_COUNT" >> $GITHUB_OUTPUT

        if [ "$PR_COUNT" -gt 0 ]; then
          PR_URL=$(echo "$EXISTING_PR" | jq -r '.[0].html_url')
          echo "existing_pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "기존 PR이 존재합니다: $PR_URL"
        else
          echo "기존 PR이 없습니다. 새로 생성합니다."
        fi

    - name: PR 본문 준비
      id: pr_body
      if: steps.check_existing_pr.outputs.existing_pr_count == '0'
      run: |
        # PR 본문 생성 (GitHub Actions 변수 치환 포함)
        cat > pr_body_template.md << 'EOF'
        ## 📋 배포 내용

        **배포 일시:** DEPLOY_DATE DEPLOY_TIME
        **배포 브랜치:** `feature/local` → `main`

        ## ✨ 주요 변경사항

        COMMIT_LIST

        ## 📁 수정된 파일들

        CHANGED_FILES

        ## 🔍 배포 전 체크리스트

        - [ ] 모든 기능이 정상적으로 작동하는지 확인
        - [ ] 빌드가 성공적으로 완료되는지 확인
        - [ ] 캐시 무효화 시스템이 정상 작동하는지 확인
        - [ ] Open Graph 이미지가 올바르게 표시되는지 확인
        - [ ] 모바일 반응형이 정상적으로 작동하는지 확인

        ## 🚀 배포 후 확인사항

        - [ ] 메인 페이지 로딩 확인
        - [ ] 블로그 페이지 정상 동작 확인
        - [ ] 관리자 페이지 기능 확인
        - [ ] SEO 메타태그 정상 출력 확인
        - [ ] 소셜 미디어 공유 시 OG 이미지 정상 표시 확인

        ---
        *이 PR은 자동으로 생성되었습니다. 🤖*
        EOF

        # 변수 치환
        sed -i "s/DEPLOY_DATE/${{ steps.date.outputs.current_date }}/g" pr_body_template.md
        sed -i "s/DEPLOY_TIME/${{ steps.date.outputs.current_time }}/g" pr_body_template.md
        sed -i "s|COMMIT_LIST|${{ steps.changes.outputs.commits }}|g" pr_body_template.md
        sed -i "s|CHANGED_FILES|${{ steps.changes.outputs.changed_files }}|g" pr_body_template.md

        # 완성된 PR 본문을 output으로 설정
        {
          echo 'pr_body<<EOF'
          cat pr_body_template.md
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: GitHub API로 PR 생성
      if: steps.check_existing_pr.outputs.existing_pr_count == '0'
      run: |
        # JSON 페이로드 생성
        jq -n \
          --arg title "🚀 MAIN 배포" \
          --arg head "feature/local" \
          --arg base "main" \
          --arg body "${{ steps.pr_body.outputs.pr_body }}" \
          --argjson draft false \
          '{
            title: $title,
            head: $head,
            base: $base,
            body: $body,
            draft: $draft
          }' > pr_payload.json

        # GitHub API를 통한 PR 생성
        RESPONSE=$(curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls" \
          -d @pr_payload.json)

        # 응답 확인
        PR_URL=$(echo "$RESPONSE" | jq -r '.html_url // empty')
        if [ -n "$PR_URL" ]; then
          echo "✅ PR이 성공적으로 생성되었습니다!"
          echo "🔗 PR URL: $PR_URL"
        else
          echo "❌ PR 생성에 실패했습니다."
          echo "응답: $RESPONSE"
          exit 1
        fi

    - name: 기존 PR 알림
      if: steps.check_existing_pr.outputs.existing_pr_count != '0'
      run: |
        echo "⚠️ feature/local → main PR이 이미 존재합니다."
        echo "🔗 기존 PR: ${{ steps.check_existing_pr.outputs.existing_pr_url }}"

    - name: PR 생성 완료 알림
      run: |
        echo "🎉 MAIN 배포 PR이 성공적으로 생성되었습니다!"
        echo "📅 생성 시간: $(date +'%Y-%m-%d %H:%M:%S')"