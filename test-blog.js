const { chromium } = require('playwright');

(async () => {
  console.log('üé≠ Starting Playwright test for blog functionality...');

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // Navigate to blog page
    console.log('üì± Navigating to blog page...');
    await page.goto('https://pick-drawyourmind.vercel.app/blog');

    // Wait for page to load
    await page.waitForLoadState('networkidle');

    // Take screenshot of blog page
    await page.screenshot({ path: 'blog-page.png' });
    console.log('üì∏ Screenshot saved as blog-page.png');

    // Check if blog posts are loaded
    const blogPosts = await page.locator('article').count();
    console.log(`üìù Found ${blogPosts} blog posts on the page`);

    if (blogPosts > 0) {
      // Try to click the first "ÏûêÏÑ∏Ìûà Î≥¥Í∏∞" link
      console.log('üîó Trying to click first "ÏûêÏÑ∏Ìûà Î≥¥Í∏∞" link...');
      const firstDetailLink = page.locator('text=ÏûêÏÑ∏Ìûà Î≥¥Í∏∞').first();

      if (await firstDetailLink.count() > 0) {
        const href = await firstDetailLink.getAttribute('href');
        console.log(`üîó First detail link href: ${href}`);

        // Click the link
        await firstDetailLink.click();

        // Wait for navigation
        await page.waitForLoadState('networkidle');

        // Check current URL
        const currentUrl = page.url();
        console.log(`üìç Current URL after click: ${currentUrl}`);

        // Take screenshot of blog post page
        await page.screenshot({ path: 'blog-post-page.png' });
        console.log('üì∏ Screenshot saved as blog-post-page.png');

        // Check if we're on a blog post page or error page
        const pageTitle = await page.title();
        const h1Text = await page.locator('h1').first().textContent();
        console.log(`üìÑ Page title: ${pageTitle}`);
        console.log(`üìã H1 text: ${h1Text}`);

        // Check if there's an error message
        const errorText = await page.locator('text=Ìè¨Ïä§Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§').count();
        if (errorText > 0) {
          console.log('‚ùå Error: Blog post not found message detected');
        } else {
          console.log('‚úÖ Blog post page loaded successfully');
        }
      } else {
        console.log('‚ùå No "ÏûêÏÑ∏Ìûà Î≥¥Í∏∞" links found');
      }
    } else {
      console.log('‚ùå No blog posts found on the page');

      // Check if there's a "no posts" message
      const noPostsText = await page.locator('text=ÏïÑÏßÅ Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§').count();
      if (noPostsText > 0) {
        console.log('üìù "No blog posts" message found');
      }
    }

    // Test direct URL access
    console.log('üîó Testing direct URL access...');
    await page.goto('https://pick-drawyourmind.vercel.app/blog/ÎèÖÏÑúÏùò-Í≥ÑÏ†à-ÎèÑÏÑúxÎ¨∏Íµ¨-saleÎ°ú-ÌäπÎ≥ÑÌïú-Ìï†Ïù∏-ÌòúÌÉù--1758211184216');
    await page.waitForLoadState('networkidle');

    const directUrlTitle = await page.title();
    const directUrlH1 = await page.locator('h1').first().textContent();
    console.log(`üìÑ Direct URL page title: ${directUrlTitle}`);
    console.log(`üìã Direct URL H1 text: ${directUrlH1}`);

    // Take screenshot of direct URL access
    await page.screenshot({ path: 'direct-blog-url.png' });
    console.log('üì∏ Screenshot saved as direct-blog-url.png');

    const directUrlError = await page.locator('text=Ìè¨Ïä§Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§').count();
    if (directUrlError > 0) {
      console.log('‚ùå Error: Direct URL also shows "post not found"');
    } else {
      console.log('‚úÖ Direct URL works correctly');
    }

  } catch (error) {
    console.error('‚ùå Error during test:', error);
  } finally {
    console.log('üîö Test completed. Keeping browser open for manual inspection...');
    // Don't close browser automatically so we can inspect
    // await browser.close();
  }
})();